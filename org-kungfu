#!/usr/bin/env perl
# [[file:~/src/github/org-kungfu/org-kungfu.org::the-ultimate-script][the-ultimate-script]]
#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;


## start code-generator "^\\s *#\\s *"
# generate-getopt -P -s perl -p ok \
# '?subcmd_help()' \
# u:username '?"Login Username"' \
# p:password '?"Login Password"' \
# w:wikiurl '?"Wiki URL (only FQDN, no / and such)"' \
# vverbose '?"Verbose debug output"'
## end code-generator
## start generated code
use Getopt::Long;
use File::Slurp;

Getopt::Long::Configure("posix_default");



my $ok_password = "";
my $ok_username = "";
my $ok_verbose = 0;
my $ok_wikiurl = "";

my $handler_help = sub {
    print subcmd_help();
    print "\n\n选项和参数：\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--password=PASSWORD';
    if (length('--password=PASSWORD') > 24 and length("Login Password") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Login Password";
    print "\n";
    printf "%6s", '-u, ';
    printf "%-24s", '--username=USERNAME';
    if (length('--username=USERNAME') > 24 and length("Login Username") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Login Username";
    print "\n";
    printf "%6s", '-v, ';
    printf "%-24s", '--[no]verbose';
    if (length('--[no]verbose') > 24 and length("Verbose debug output") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Verbose debug output";
    print "\n";
    printf "%6s", '-w, ';
    printf "%-24s", '--wikiurl=WIKIURL';
    if (length('--wikiurl=WIKIURL') > 24 and length("Wiki URL (only FQDN, no / and such)") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Wiki URL (only FQDN, no / and such)";
    print "\n";

    exit(0);
};

GetOptions (
    'password|p=s' => \$ok_password,
    'username|u=s' => \$ok_username,
    'verbose|v!' => \$ok_verbose,
    'wikiurl|w=s' => \$ok_wikiurl,
    'help|h!' => \&$handler_help,
    );


## end generated code
use v5.10;

my %file_config;
use Config::Simple;

my ($config_file) = glob "~/.config/org-kungfu/config.ini";

if (-e $config_file) {
    Config::Simple->import_from($config_file, \%file_config);
}

if (not $ok_password) {
    $ok_password = $file_config{"ok.password"};
}

if (not $ok_password) {
    say "Must specify the wiki password";
    &$handler_help(1)
}

if (not $ok_username) {
    $ok_username = $file_config{"ok.username"};
}

if (not $ok_username) {
    say "Must specify the wiki username";
    &$handler_help(1);
}

if (not $ok_wikiurl) {
    $ok_wikiurl = $file_config{"ok.wikiurl"};
}

$ok_wikiurl =~ s,/*$,/,;

if (not $ok_wikiurl) {
    say "Must specify the wiki url";
    &$handler_help(1);
}

my $ok_topdir = $file_config{"ok.topdir"};
if (not $ok_topdir) {
    $ok_topdir = glob("~/src/github/kungfu-edit");
}

use File::Path;
make_path($ok_topdir);
use POSIX;
$ENV{OLDPWD} = getcwd;

chdir($ok_topdir)
    or die "Can't chdir: $ok_topdir";

sub System(@) {
    my $ret = system(@_);
    if ($ret != 0) {
        die "Failed to run: @_";
    }
}

use v5.10;
use HTTP::Request::Common;
use LWP::UserAgent;
use JSON;
use File::Path qw(make_path);
use File::Basename;
use Encode;

sub kungfu_url_for_api($) {
    (my $api_path = $_[0]) =~ s,^/,,;

    my $auth_str = sprintf "%s:%s@", $ok_username, $ok_password;
    (my $scm_confluence_site = $ok_wikiurl) =~ s,(https?://),$1$auth_str,;
    return "${scm_confluence_site}${api_path}";
}

sub get($) {
    my $ua = LWP::UserAgent->new;
    my $api = $_[0];
    my $url = kungfu_url_for_api($api);
    say STDERR "ok curl " . shell_quote($api) if $ok_verbose;
    my $response = $ua->request(GET $url);
    if ($response->code != 200) {
        die "Can't get $api: code is " . $response->code . ", content is " . $response->content;
    }

    return $response;
}

sub get_json($) {
    my $response = get($_[0]);
    return $json->decode($response->content);
}

sub ok_curl(@) {
    my $response = get($_[0]);
    print decode_utf8($response->content);
}

sub get_page_info($$) {
    my ($page_id, $expand) = @_;
    my $page_api = "rest/api/content/${page_id}?expand=${expand}";

    my $response = get($page_api);
    my $page_object = $json->decode($response->content);
    return $page_object;
}
sub ok_get1page(@) { # download a page's html, save it, test if org needs update.
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P p:page-id
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $page_id = "";

    GetOptions (
        'page-id|p=s' => \$page_id,
        'help|h!' => \&handler_help,
        );

    sub handler_help {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--page-id=PAGE-ID';
        if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    }

    ## end generated code

    my $page_api = "rest/api/content/${page_id}?expand=body.editor,version,ancestors";

    my $response = get($page_api);
    my $page_object = $json->decode($response->content);

    my @dirs = (".");
    my $path = "";
    for my $ancestor (@{$page_object->{ancestors}}) {
        (my $dir = $ancestor->{title}) =~ s,/,%,g;
        push @dirs, $dir;
    }

    (my $title = $page_object->{title}) =~ s,/,%,g;
    push @dirs, ${title};
    $path = join('/', @dirs);

    make_path($path);
    chdir($path)
        or die "Can't chdir $path";

    system("git add .; git commit --allow-empty -m 'save to git before download from confluence'");

    write_file("content.html", encode_utf8 $page_object->{body}{editor}{value});

    my $current_version = 0;
    if (-e "version.txt") {
    $current_version = decode_utf8(scalar capture("cat version.txt"));
    }

    my $need_update_org = 0;
    if ($current_version < $page_object->{version}{number}) {
        write_file("page-id.txt", $page_id);
        write_file("page-title.txt", $page_object->{title});
        download_all_attachments($page_id);
        rewrite_html_after_download();
        $need_update_org = 1;
    }
    system("git add .; git commit --allow-empty -m 'save to git after rewrite'");
    write_file("version.txt", $page_object->{version}{number});

    return $need_update_org;
}

sub download_1_file($) {
    my ($download_path) = @_;

    (my $filename = $download_path) =~ s/\?.*//;
    $filename = "./$filename";
    make_path("./" . dirname($filename));
    if (-e $filename) {
        return;
    }
    my $response = get($download_path);
    write_file("$filename", $response->content);
}

sub download_all_attachments($) {
    my ($page_id) = @_;
    my ($api_path) = "rest/api/content/${page_id}/child/attachment";
    my $response = get($api_path);
    my $object = $json->decode($response->content);

    our $attachments_json = $object;

    for my $attachment (@{$object->{results}}) {
        my $download_path = $attachment->{_links}{download};
        download_1_file($download_path);
    }
}

use Mojo::DOM;
sub rewrite_html_after_download() {
    my $html_str = read_file("content.html");
    write_file("content-after-download.html", $html_str);

    $html_str = decode_utf8 $html_str;

    my $dom = Mojo::DOM->new($html_str);
    my $wikiurl_re = qr(\Q${ok_wikiurl}\E);
    $dom->find('img')->each(
        sub {
            my $src = $_->{src};
            if ($src =~ m,^(/|${wikiurl_re})download/,) {
                $src =~ s,^$wikiurl_re,/,;
                $src =~ s,\?.*,,;
                if (not -e ".$src") {
                    download_1_file($src);
                }
                $src = ".$src";
                $_->{src} = $src;
            }
        });
    write_file("content.html", encode_utf8 $dom);
}

sub ok_rhfu() {
    rewrite_html_for_update();
}

sub rewrite_html_for_update() {
    my $html_str = read_file("content.html");

    $html_str = decode_utf8 $html_str;
    my $dom = Mojo::DOM->new->xml(1)->parse($html_str);

    my $should_emojify = 0;

    $dom->find('img')->each(
        sub {
            my $src = $_->{src};
            if ($src =~ m,^\./download/,) {
                $src =~ s/^\.//;
            }
            $_->{src} = $src;

            $should_emojify = 1;
        }
    );

    if ($should_emojify) {
    my $page_id = decode_utf8(scalar capture("cat page-id.txt"));
        my %existing_attachments;
        my $attachment_nextlink = "rest/api/content/${page_id}/child/attachment";

        do {
            my $attachments_json = $json->decode(encode_utf8(get($attachment_nextlink)->content));
            for (@{$attachments_json->{results}}) {
                my $title = $_->{title};
                $existing_attachments{$title} = 1;
            }
            ($attachment_nextlink = $attachments_json->{_links}{next}) =~ s,^/,,;
        } while ($attachment_nextlink);

        # replace emojis with wiki attachment
        $dom->find('img')->each(
            sub {
                my $png_file = $_->{src};
                if ($png_file =~ m,^(\.?/)download/thumbnails/$page_id/,) {
                    $png_file =~ s,download/thumbnails/,download/attachments/,;
                    $_->{src} = $png_file;
                }

                if ($png_file =~ m,^(\.?/)download/attachments/$page_id/,) {
                    unless ($_->{class} eq "emoji") {
                        $_->replace(
                            sprintf("<a href='%s' title='点击查看大图'>%s</a>", $_->{src}, $_->to_string)
                        );
                    }

                    return;
                }

                if (! -e "$png_file") {
                    use URI::Encode qw(uri_encode uri_decode);

                    use File::Fetch;
                    my $ff = File::Fetch->new(uri => uri_decode $png_file);
                    if ($ff && $ff->scheme eq "file") {
                        my $new_file = sprintf "%s/%s", $ff->path, $ff->file;

                        say STDERR "png changed from $png_file to $new_file";
                        $png_file = $new_file;
                    } else {
                        say STDERR "Don't know how to upload: $png_file";
                        return;
                    }
                }

                (my $png_file_basename = $png_file) =~ s,.*/,,;
                $png_file_basename =~ s,\+,-,g;

                use File::Path qw(make_path remove_tree);
                my $attach_dir = "download/attachments/$page_id/";
                make_path($attach_dir);

                if ($_->{class} eq 'emoji') {
                    $png_file_basename = "ok.emoji.${png_file_basename}";
                }

                my $attach_file = "$attach_dir/$png_file_basename";
                if (! $existing_attachments{$png_file_basename} || runx(EXIT_ANY, "diff", "-q", "${png_file}", "${attach_file}") != 0) {
                    system("cp", "$png_file", "$attach_file");
                    ok_upload1attachment("-p", "$page_id", "-f", "$attach_file");
                    $existing_attachments{$png_file_basename} = 1;
                }
                ($_->{src} = "/$attach_file") =~ s,(?<!:)/+,/,g;

                unless ($_->{class} eq 'emoji') {
                    $_->replace(
                        sprintf("<a href='%s' title='点击查看大图'>%s</a>", $_->{src}, $_->to_string)
                    );
                }
            }
        )
    }

    write_file("content.html", encode_utf8 $dom);
    System("cp content.html after-fix-img.html");
    if ($ENV{SYSTEM_CONFIG_INITED} eq 'true') {
        System("css-inline content.html | tee-with-tmp content.html");
    }
    System("cp content.html after-css-inline.html");
}

sub ok_update1page(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P p:page-id f:html-file=content.html @quietly
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $html_file = "content.html";
    my $page_id = "";
    my $quietly = 0;

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-f, ';
        printf "%-24s", '--html-file=HTML-FILE';
        if (length('--html-file=HTML-FILE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--page-id=PAGE-ID';
        if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '';
        printf "%-24s", '--[no]quietly';
        if (length('--[no]quietly') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'html-file|f=s' => \$html_file,
        'page-id|p=s' => \$page_id,
        'quietly!' => \$quietly,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    if (@ARGV) {
        die "Can't parse these extra args: @ARGV";
    }

    my $page_api = "rest/api/content/${page_id}?expand=body.editor,version,title";

    my $response = get($page_api);
    my $page_object = $json->decode($response->content);

    $page_object->{body}{editor}{value} = decode_utf8 read_file($html_file);
    $page_object->{version}{number}++;
    $page_object->{version}{message} = "Edit with org-mode";

    write_file("version.txt", $page_object->{version}{number});

    my $ua = LWP::UserAgent->new;
    my $request = PUT kungfu_url_for_api("rest/api/content/${page_id}"),
        'Content-Type' => 'application/json',
        "charset" => "utf-8",
        Content => $json->encode($page_object);

    my $response = $ua->request($request);
    if ($response->code != 200) {
        say "PUT response code:" . $response->code;
        say "response content:" . decode_utf8($response->content);
        die "Can't upload page: " . decode_utf8($json->encode($page_object));
    }

    if (not $quietly) {
        System("open ${ok_wikiurl}/pages/viewpage.action?pageId=${page_id}");
        system("git add .; git commit --allow-empty -m 'save to git after upload to confluence'");
    }
}
sub ok_upload1attachment(@) {
    say STDERR "upload attachment: " . decode_utf8($json->encode(\@_));
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P p:page-id f:filename
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $filename = "";
    my $page_id = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-f, ';
        printf "%-24s", '--filename=FILENAME';
        if (length('--filename=FILENAME') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--page-id=PAGE-ID';
        if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'filename|f=s' => \$filename,
        'page-id|p=s' => \$page_id,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    my $ua = LWP::UserAgent->new;
    my $api = sprintf "rest/api/content/%d/child/attachment", $page_id;

    (my $file_basename = $filename) =~ s,.*/,,;
    my $attachment_id;
    our $attachments_json;

    if (not $attachments_json) {
        $attachments_json = get_json($api);
    }

    say STDERR decode_utf8($json->encode($attachments_json)) if $ok_verbose;
    my $request;
    if (grep {
        $_->{title} eq $file_basename && ($attachment_id = $_->{id})
    } @{$attachments_json->{results}}) {
        $api .= "/${attachment_id}/data";
        $request = POST kungfu_url_for_api($api),
            "X-Atlassian-Token" => "nocheck",
            Content_Type => 'form-data',
            Content => [
                file => [encode_utf8 "$filename"],
            ];
    } else {
        $request = POST kungfu_url_for_api($api),
            "X-Atlassian-Token" => "nocheck",
            Content_Type => 'form-data',
            Content => [
                file => [encode_utf8 "$filename"],
                minorEdit => "true",
            ];
    }

    my $response = $ua->request($request);
    say "POST response code:" . $response->code;
    if ($response->code != 200) {
        die "Can't POST $filename to $api: code is " . $response->code . ", content is:\n\n" . decode_utf8($response->content) . "\n"
    }

    return $response;


}

sub ok_ehbwo() { # edit current emacs buffer's html as org-mode, requires system-config
    ok_edit_html_with_org("--edit-html-buffer");
}

sub ok_ehwo() { # html from stdin, edit with org, output with html
    ok_edit_html_with_org("--edit-pipe");
}

sub ok_erwo(@) { # edit region (comments) with org-mode, requires system-config
    chdir "$ENV{HOME}/tmp"
        or die "Can't chdir to ~/tmp";

        my $selected_text = decode_utf8(scalar capture(qq(emacs-current-selection -b buffer-erwo-$$)));
    my @selected_lines = split("\n", $selected_text);
    my $first_prefix;
    for (@selected_lines) {
        if (m/^(\s*\S+\s*)/) {
            $first_prefix = $1;
            last;
        }
    }

    my $first_prefix_re = qr(\Q${first_prefix}\E);
    $selected_text =~ s,^$first_prefix_re,,gm;
    write_file("erwo-$$.org", $selected_text);
    System("emacsclient erwo-$$.org");
    my $edited_text = read_file("erwo-$$.org");
    $edited_text =~ s,^,$first_prefix,gm;
    write_file("erwo-$$.org", $edited_text);

    my $emacs_script = <<~'EOF20924b0d836e';
    ; {%emacs-lisp-mode%}
    (progn
      (switch-to-buffer buffer-erwo-<%pid%>)
      (delete-region (point) (mark))
      (insert-file "<%pwd%>/erwo-<%pid%>.org"))
    ; {%/emacs-lisp-mode%}
    EOF20924b0d836e

    use Cwd;
    my $cwd = getcwd();
    $emacs_script =~ s,<%pid%>,$$,g;
    $emacs_script =~ s,<%pwd%>,$cwd,g;

    System("emacsclient", "-e", $emacs_script);
}

sub ok_edit_html_with_org(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P @edit-html-buffer '?"Get the html from current emacs buffer, SC ONLY"' \
    # @edit-pipe '?"edit html from pipeline, edit with org-mode, output new html"' \
    # u:update-org=1 '?"Update the .org file from the .html file"'
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $edit_html_buffer = 0;
    my $edit_pipe = 0;
    my $update_org = 1;

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '';
        printf "%-24s", '--[no]edit-html-buffer';
        if (length('--[no]edit-html-buffer') > 24 and length("Get the html from current emacs buffer, SC ONLY") > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", "Get the html from current emacs buffer, SC ONLY";
        print "\n";
        printf "%6s", '';
        printf "%-24s", '--[no]edit-pipe';
        if (length('--[no]edit-pipe') > 24 and length("edit html from pipeline, edit with org-mode, output new html") > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", "edit html from pipeline, edit with org-mode, output new html";
        print "\n";
        printf "%6s", '-u, ';
        printf "%-24s", '--update-org=UPDATE-ORG';
        if (length('--update-org=UPDATE-ORG') > 24 and length("Update the .org file from the .html file") > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", "Update the .org file from the .html file";
        print "\n";

        exit(0);
    };

    GetOptions (
        'edit-html-buffer!' => \$edit_html_buffer,
        'edit-pipe!' => \$edit_pipe,
        'update-org|u=s' => \$update_org,
        'help|h!' => \&$handler_help,
    );


    ## end generated code

    if ($edit_html_buffer or $edit_pipe) {
        use File::Path qw(make_path remove_tree);
        my $tmp_dir = "$ENV{HOME}/tmp/.ehbwo/edit-$$";
        make_path($tmp_dir);
        chdir($tmp_dir);

        use AtExit;
        *clean_tmpdir = sub {
            chdir "/";
            remove_tree $tmp_dir;
        };
        atexit(\&clean_tmpdir);
        if ($edit_html_buffer) {
            System("emacs-current-text -s buffer-ehbwo-$$ > content.html");
        } else {
            System("cat > content.html");
        }
    }

    if ($update_org) {
        System("(echo '#+OPTIONS: toc:nil num:nil'; pandoc --wrap=none -f html -t org content.html | perl -pe 's,\\\\_,_,g') > content.org");
    } else {
        # system("bhj-notify 'ok' 'No need to update the org file'");
    }

    System("emacsclient content.org 1>&2");

    my $emacs_script = <<~'EOF64f308bc1e9a';
          ; {%emacs-lisp-mode%}
    (progn
     (defun org-kungfu--orgtext-to-html (orgtext)
       (with-temp-buffer
         (insert orgtext)
         (let ((org-export-show-temporary-export-buffer t))
           (org-html-export-as-html nil nil nil t)
           (prog1
               (buffer-substring-no-properties (point-min) (point-max))
             (kill-buffer)))))

     (defun org-kungfu--export-to-html (file)
       (with-temp-buffer
         (insert-file file)
         (org-mode)
         (let ((html_str (org-kungfu--orgtext-to-html (buffer-substring-no-properties (point-min) (point-max))))
               (html_file (replace-regexp-in-string "\\.org" ".html" file)))
           (delete-region (point-min) (point-max))
           (fundamental-mode)
           (insert html_str)
           (when (fboundp 'org2html-emojify)
             (org2html-emojify))
           (write-file html_file))))

     (defun org-kungfu--export-to-buffer (file buffer)
       (with-temp-buffer
         (insert-file file)
         (org-mode)
         (let ((html_str (org-kungfu--orgtext-to-html (buffer-substring-no-properties (point-min) (point-max)))))
           (with-current-buffer buffer
             (delete-region (point-min) (point-max))
             (insert html_str)))))

     (defun org-kungfu-get-section-anchor ()
       (interactive)
       (let* ((page-title (shell-command-to-string "cat page-title.txt"))
              (page-id (shell-command-to-string "cat page-id.txt"))
              (heading (org-get-heading t t t t))
              (wiki-url (replace-regexp-in-string "/*$" "/" (shell-command-to-string "git config -f ~/.config/org-kungfu/config.ini ok.wikiurl | tr -d '\\n'")))
              (anchor (replace-regexp-in-string "\\s +" "" (concat page-title "-" heading))))
         (with-temp-buffer
           (insert wiki-url "pages/viewpage.action?pageId=" page-id "#" anchor)
           (kill-region (point-min) (point-max)))))
     <%how-to-export%>)
                ; {%/emacs-lisp-mode%}

    EOF64f308bc1e9a

    if ($edit_html_buffer) {
        $emacs_script =~ s,<%how-to-export%>,
            (org-kungfu--export-to-buffer "content.org" buffer-ehbwo-$$)
            (pop-to-buffer buffer-ehbwo-$$)
            (unintern 'buffer-ehbwo-$$),x;
    } else {
        $emacs_script =~ s,<%how-to-export%>,(org-kungfu--export-to-html "content.org"),;
    }

    $emacs_script = shell_quote($emacs_script);
    System("emacsclient -e $emacs_script 1>&2");

    if (not $edit_html_buffer) {
        if ($edit_pipe) {
            System("cat content.html");
        } else {
            System("cp content.html content-after-export.html");
        }
    }
}

sub get_page_id_maybe_from_url($$) {
    my ($page_id, $url) = @_;
    if ($url =~ m/pageid=(\d+)/i) {
        if (not $page_id) {
            $page_id = $1;
        } else {
            die "Please specify only 1 of --url and --page-id";
        }
    }

    if (not $page_id) {
        our %path_id_map;
        (my $path = $url) =~ s,.*?://.*?/,,;
        unless ($page_id = $path_id_map{$path}) {
            die "Must specify the page_id: $path $url"
        }
    }
    return $page_id;
}

sub ok_e(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P u:url '?"copy and paste the whole wiki page url to calculate page_id, make UX easier than copy-and-pasting page_id only"' \
    # p:page-id
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $page_id = "";
    my $url = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--page-id=PAGE-ID';
        if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-u, ';
        printf "%-24s", '--url=URL';
        if (length('--url=URL') > 24 and length("copy and paste the whole wiki page url to calculate page_id, make UX easier than copy-and-pasting page_id only") > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", "copy and paste the whole wiki page url to calculate page_id, make UX easier than copy-and-pasting page_id only";
        print "\n";

        exit(0);
    };

    GetOptions (
        'page-id|p=s' => \$page_id,
        'url|u=s' => \$url,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    $page_id = get_page_id_maybe_from_url($page_id, $url);

    my $need_update_org = ok_get1page("-p", $page_id);
    ok_edit_html_with_org("-u", "$need_update_org");

    rewrite_html_for_update();
    ok_update1page("-p", $page_id);
}
sub ok_create1page(@) {
    say "create page: ", join(" ", @_);
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l p:page-id t:title
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $page_id = "";
    my $title = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--page-id=PAGE-ID';
        if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-t, ';
        printf "%-24s", '--title=TITLE';
        if (length('--title=TITLE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'page-id|p=s' => \$page_id,
        'title|t=s' => \$title,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    my $parent_page_obj = get_page_info($page_id, "");
    (my $space = $parent_page_obj->{_expandable}{space}) =~ s,.*/,,;

    my $create_page_json_str = <<~'EOF';
          # {%json-mode%}
          {
            "title": "",
            "type": "page",
            "space": {
              "key": ""
            },
            "status": "current",
            "ancestors": [
              {
                "id": ""
              }
            ],
            "body": {
              "view": {
                "value": ""
              }
            }
          }
          # {%/json-mode%}
    EOF

    $create_page_json_str =~ s,^\s*#.*,,mg;
    my $create_page_json_obj = $json->decode(encode_utf8 $create_page_json_str);

    $create_page_json_obj->{title} = $title;
    $create_page_json_obj->{space}{key} = $space;
    $create_page_json_obj->{ancestors}[0]{id} = $page_id;

    my $ua = LWP::UserAgent->new;
    my $api = "rest/api/content";

    my $request = POST kungfu_url_for_api($api),
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
        "charset" => "utf-8",
        Content => ($json->encode($create_page_json_obj));

    my $response = $ua->request($request);
    say "POST response code:" . $response->code;
    if ($response->code != 200) {
        die "Can't get $api: code is " . $response->code . ", content is:\n\n" . decode_utf8($response->content) . "\n"
    }
    my $created_obj = $json->decode($response->content);
    ok_e("-p", $created_obj->{id});
}

sub ok_create_sibling_page(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l t:title p:page-id
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("default");

    local @ARGV = @_;

    my $page_id = "";
    my $title = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--page-id=PAGE-ID';
        if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-t, ';
        printf "%-24s", '--title=TITLE';
        if (length('--title=TITLE') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'page-id|p=s' => \$page_id,
        'title|t=s' => \$title,
        'help|h!' => \&$handler_help,
        );


    ## end generated code

    my $current_page_obj = get_page_info($page_id, "ancestors");
    my $parent_page_id = $current_page_obj->{ancestors}[-1]{id};
    ok_create1page("-t", $title, "-p", $parent_page_id);
}
use String::ShellQuote;
use URI::Encode qw(uri_encode uri_decode);
sub ok_np(@) {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -s perl -l -P p:page-id u:url t:title-pattern q:cql-query
    ## end code-generator
    ## start generated code
    use Getopt::Long;

    Getopt::Long::Configure("posix_default");

    local @ARGV = @_;

    my $cql_query = "";
    my $page_id = "";
    my $title_pattern = "";
    my $url = "";

    my $handler_help = sub {
        print ;
        print "\n\n选项和参数：\n";
        printf "%6s", '-q, ';
        printf "%-24s", '--cql-query=CQL-QUERY';
        if (length('--cql-query=CQL-QUERY') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-p, ';
        printf "%-24s", '--page-id=PAGE-ID';
        if (length('--page-id=PAGE-ID') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-t, ';
        printf "%-24s", '--title-pattern=TITLE-PATTERN';
        if (length('--title-pattern=TITLE-PATTERN') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";
        printf "%6s", '-u, ';
        printf "%-24s", '--url=URL';
        if (length('--url=URL') > 24 and length() > 0) {
            print "\n";
            printf "%30s", "";
        }
        printf "%s", ;
        print "\n";

        exit(0);
    };

    GetOptions (
        'cql-query|q=s' => \$cql_query,
        'page-id|p=s' => \$page_id,
        'title-pattern|t=s' => \$title_pattern,
        'url|u=s' => \$url,
        'help|h!' => \&$handler_help,
    );


    ## end generated code

    if (not $page_id and not $url) {
        my @command = (
            "select-args", "-p", "Which recent page do you want to create a new page under?",
            );


        my $cql_str = "contributor in ($ok_username) and type = page";
        if ($title_pattern) {
            $cql_str .= " and title ~ \"${title_pattern}\"";
        }
        $cql_str .= " ORDER BY lastmodified DESC";

        if ($cql_query) {
            $cql_str = $cql_query;
        }

        $cql_str = uri_encode($cql_str);
        my $page_api = "rest/api/search?cql=$cql_str&expand=content.ancestors";

        my $response = get($page_api);

        my $cql_object = $json->decode($response->content);

        our %id_path_map;
        our %path_id_map;
        my @paths;
        for my $result (@{$cql_object->{results}}) {
            # my @dirs = (".");
            # my $path = "";
            # for my $ancestor (@{$page_object->{ancestors}}) {
            #     (my $dir = $ancestor->{title}) =~ s,/,%,g;
            #     push @dirs, $dir;
            # }

            # (my $title = $page_object->{title}) =~ s,/,%,g;
            # push @dirs, ${title};
            # $path = join('/', @dirs);

            my $path =
                join("/",
                     map {
                         s,/,%,g; $_;
                     }
                     (
                      map {
                          $_->{title}
                      } @{$result->{content}{ancestors}}
                     ),
                     $result->{title}
                );
            $path =~ s,\@\@\@\w+\@\@\@,,g;
            $id_path_map{$result->{content}{id}} = $path;
            $path_id_map{$path} = $result->{content}{id};

            say STDERR "path $path => $path_id_map{$path}" if $ok_verbose;
            push @paths, $path;
        }

        my @select_command = (
            "select-args", "-p", "Please select which page you want to edit",
            @paths
            );

        my $select_command = join " ", map {$_ = shell_quote($_)} @select_command;
        my $path_sel = decode_utf8(scalar capture(qq($select_command)));

        my %actions_desc_name_map = (
            "edit it" => "edit-me",
            "open it" => "open-it",
            "putclip url (copy the url in the clipboard)" => "putclip-url",
            "create a child page" => "edit-baby",
            "create a sibling page" => "edit-bro"
            );

        @select_command = (
            "select-args", "-o", "-p", "Please select what do you want do with this page",
            keys %actions_desc_name_map
            );

        $select_command = join " ", map {$_ = shell_quote($_)} @select_command;
        my $action_desc = decode_utf8(scalar capture($select_command));
        my $page_id = $path_id_map{$path_sel};
        if ($actions_desc_name_map{$action_desc} eq "edit-me") {
            say STDERR "ok_e -p $page_id" if $ok_verbose;
            ok_e("-p", $page_id);
        } elsif ($actions_desc_name_map{$action_desc} eq "open-it") {
            System("of ${ok_wikiurl}pages/viewpage.action?pageId=${page_id}");
        } elsif ($actions_desc_name_map{$action_desc} eq "putclip-url") {
            System("putclip ${ok_wikiurl}pages/viewpage.action?pageId=${page_id}");
        }else {
        my $page_title = decode_utf8(scalar capture(qq(ask-for-input-with-emacs -p 'Please input your new page title')));
            if ($actions_desc_name_map{$action_desc} eq "edit-baby") {
                ok_create1page("-p", $page_id, "-t", $page_title);
            } elsif ($actions_desc_name_map{$action_desc} eq "edit-bro") {
                ok_create_sibling_page("-p", $page_id, "-t", $page_title);
            }
        }
    } else {
        $page_id = get_page_id_maybe_from_url($page_id, $url);
    }

}
sub subcmd_help() {
    my $top_help_str = <<~'EOF';
        Usage: org-kungfu [GLOBAL_OPTIONS]... SUB_COMMAND SUBCMD_ARGS...
        Here's the list of sub-commands:
        EOF

    my @subcmd_help_strs;
    my %subcmd_helpstr_map = (
        update1page => "Update 1 page (html text and all images -- automatically upload as page attachments)",
        get1page => "Get 1 page (html text and all image attachments)",
        e => "Edit 1 page in emacs org-mode, download/edit/upload",
        );

    my %help_printed_map;

    for my $subcmd ((sort {$a cmp $b} grep {m/^ok_/} keys %::), (sort {$a cmp $b} keys %subcmd_helpstr_map)) {
        (my $raw_subcmd = $subcmd) =~ s,^ok_,,;
        $subcmd = "ok_$raw_subcmd";
        if ($help_printed_map{$raw_subcmd}) {
            next;
        } else {
            $help_printed_map{$raw_subcmd} = 1;
        }

        my $subcmd_help_str = $subcmd_helpstr_map{$raw_subcmd} ||
            "NO DESCRIPTION.";

        if (not defined &$subcmd) {
            $subcmd_help_str .= " (NO DEFINITION)"
        }

        push @subcmd_help_strs, sprintf("    %s\n\t%s", $raw_subcmd, $subcmd_help_str);
    }

    return join "\n", $top_help_str, @subcmd_help_strs;
}
my $sub_command = "ok_" . shift;

if (not defined &$sub_command) {
    my $lib_command;

    for ("ok/") {
        ($lib_command = $sub_command) =~ s,^ok_,$_,;
        $lib_command =~ s,_,-,g;

        $lib_command = "$ENV{scm_common_libdir}/$lib_command";

        if (-x $lib_command) {
            do {
                use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
                my @args = ("$lib_command", @ARGV);
                if ($ENV{OK_TRACE} eq 'true') {
                    @args = ('debug-run', @args);
                }
                runx(@args);
                exit;
            }
        }
    }
    say "Can't find sub-command: $sub_command";
    &$handler_help();
}

$sub_command = \&{$sub_command};
&$sub_command(@ARGV);

# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
# the-ultimate-script ends here
